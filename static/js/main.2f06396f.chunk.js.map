{"version":3,"sources":["api.js","TwitzlariaCard.js","Bilatzailea.js","ZuzenekoaCard.js","Portada.js","App.js","reportWebVitals.js","index.js"],"names":["TwitchAPI","axios","create","baseURL","headers","secrets","client_id","token","GetZuzenekoak","twitzlariList","a","get","join","response","data","GetErabiltzailearenBideoak","id","GetErabiltzailearenKlipak","gaur","Date","atzeraData","setDate","getDate","filter","clip","created_at","GetErabiltzaileak","users","TwitzlariaCard","title","meta","description","image_url","zuzenean","Card","Content","Image","floated","size","src","Header","Icon","circular","inverted","color","name","Meta","Description","className","Bilatzailea","props","useState","setUsers","options","setOptions","userList","setUserList","bideoak","setBideoak","klipak","setKlipak","selectedUser","setSelectedUser","twitzlariak","map","twitzlaria","key","text","value","getErabiltzailearenBideoak","user_id","getErabiltzailearenKlipak","user","display_name","azkenBideoak","azkenKlipak","bideoa","klipa","useEffect","length","then","fetchData","Container","Dropdown","placeholder","fluid","multiple","selection","search","allowAdditions","onAddItem","event","onChange","e","Segment","Grid","columns","divided","Column","width","index","onClick","handleClick","view_count","profile_image_url","as","Group","thumbnail_url","replace","Link","to","pathname","url","target","moment","format","ZuzenekoaCard","erabiltzailea","href","user_login","rel","Label","ribbon","user_name","game_name","Portada","zuzenekoak","setZuzenekoak","getZuzenekoak","getErabiltzaileak","prevState","icon","itemsPerRow","sort","property","sortOrder","substr","b","dynamicSort","attached","broadcaster_name","extra","Row","type","role","Popup","content","hideOnScroll","basic","position","on","trigger","navigator","clipboard","writeText","console","log","App","basename","Menu","Item","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2f06396f.chunk.js","sourcesContent":["import axios from 'axios'\nimport secrets from './secrets.json';\n\nconst TwitchAPI = axios.create({\n    baseURL: 'https://api.twitch.tv/helix/',\n    headers: {\n        'client-id': secrets.client_id,\n        'Authorization': \"Bearer \" + secrets.token\n    }\n})\n\nexport const GetZuzenekoak = async(twitzlariList)  => {\n   const response = await TwitchAPI.get('streams?user_login=' + twitzlariList.join('&user_login='));\n    return response.data.data;\n};\n  \n\nexport const GetErabiltzailearenBideoak = async(id)=>{\n    const response = await TwitchAPI.get('videos?user_id=' + id);\n    return response.data.data\n};\n\n//   TwitchAPI.get('videos?user_id=' + user.id).then((response) => {\n//     response.data.data.map( (bideoa) => {\n//         new Date(bideoa.created_at)>atzeraData && (azkenBideo = [...azkenBideo, bideoa])\n//     })\n//     setBideoak(azkenBideo)\n// })\n\nexport const GetErabiltzailearenKlipak = async(id)  => {\n    const response = await TwitchAPI.get('clips?broadcaster_id=' + id + '&first=100');\n    let gaur = new Date();\n    let atzeraData = new Date();\n    atzeraData.setDate(gaur.getDate() - 40);\n    return response.data.data.filter(\n      (clip) => new Date(clip.created_at) > atzeraData\n    );\n};\n\nexport const GetErabiltzaileak = async (users) => {\n    const response = await TwitchAPI.get(\"users?login=\" + users.join(\"&login=\"))\n    return response.data.data;\n};\nexport default TwitchAPI;","import React, { useState, useEffect } from 'react';\n\nimport { Card, Image, Icon } from 'semantic-ui-react';\nimport './twitzlariakCard.css'\n\nimport api from './api.js';\n\nconst TwitzlariaCard = (({ title, meta, description, image_url, zuzenean=false }) => {\n\n  return (\n   <>\n    <Card.Content>\n      <Image\n        floated='left'\n        size='tiny'\n        src={image_url || 'https://www.pngitem.com/pimgs/m/421-4212617_person-placeholder-image-transparent-hd-png-download.png'}\n      />\n      <Card.Header>\n        {zuzenean && <Icon circular inverted size='tiny' color='red' name='record' />}\n        {title || 'Twitzlaria'}\n      </Card.Header>\n      <Card.Meta>{meta ? (meta + ' ikustaldi') : '0 ikustaldi'}</Card.Meta>\n      <Card.Description className=\"ellipsis\">\n        {description || 'twitzlariaren deskribapena hemen idatzita agertuko da'}\n      </Card.Description>\n      </Card.Content>\n  </>\n  )\n})\n\n\nexport default TwitzlariaCard;","import {\n  Card,\n  Container,\n  Dropdown,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Segment,\n} from \"semantic-ui-react\";\nimport React, { useEffect, useState } from \"react\";\nimport TwitchAPI, {\n  GetErabiltzailearenBideoak,\n  GetErabiltzailearenKlipak,\n} from \"./api.js\";\n\nimport { Link } from \"react-router-dom\";\nimport TwitzlariaCard from \"./TwitzlariaCard\";\nimport moment from \"moment\";\nimport twitzlariak from \"./twitzlariak.json\";\n\nconst Bilatzailea = (props) => {\n  const [users, setUsers] = useState([]);\n  const [options, setOptions] = useState([]);\n  const [userList, setUserList] = useState([]);\n  const [bideoak, setBideoak] = useState([]);\n  const [klipak, setKlipak] = useState([]);\n  const [selectedUser, setSelectedUser] = useState([]);\n  // const [atzeraData, setAtzeraData] = useState(new Date())\n  const twitzlariList = twitzlariak.twitzlariak.map((twitzlaria) => {\n    return { key: twitzlaria, text: twitzlaria, value: twitzlaria };\n  });\n\n  const getErabiltzailearenBideoak = async (user_id) => {\n    return await GetErabiltzailearenBideoak(user_id);\n  };\n  const getErabiltzailearenKlipak = async (user_id) => {\n    return await GetErabiltzailearenKlipak(user_id);\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      userList.length > 0 &&\n        TwitchAPI.get(\"users?login=\" + userList.join(\"&login=\")).then(\n          (response) => setUsers(response.data.data)\n        );\n    };\n    fetchData();\n  }, [userList]);\n\n  useEffect(() => {\n    setOptions(twitzlariList);\n    setSelectedUser(\"\");\n  }, []);\n\n  function handleChange(e, { value }) {\n    setUserList(value);\n    setBideoak([]);\n    setKlipak([]);\n  }\n\n  async function handleClick(user) {\n    if (user) {\n      setSelectedUser(user.display_name);\n      setBideoak([]);\n      setKlipak([]);\n      let azkenBideoak = [];\n      let azkenKlipak = [];\n      await (\n        await getErabiltzailearenBideoak(user.id)\n      ).map((bideoa) => {\n        azkenBideoak = [...azkenBideoak, bideoa];\n      });\n      setBideoak(azkenBideoak);\n\n      await (\n        await getErabiltzailearenKlipak(user.id)\n      ).map((klipa) => {\n        azkenKlipak = [...azkenKlipak, klipa];\n      });\n      setKlipak(azkenKlipak);\n    }\n  }\n\n  let gaur = new Date();\n  let atzeraData = new Date();\n  atzeraData.setDate(gaur.getDate() - 7);\n\n  return (\n    <Container>\n      <Dropdown\n        placeholder=\"Erabiltzaileak\"\n        fluid\n        multiple\n        selection\n        search\n        allowAdditions\n        onAddItem={(event, data) =>\n          setOptions([\n            ...options,\n            { key: data.value, text: data.value, value: data.value },\n          ])\n        }\n        options={options}\n        onChange={handleChange}\n      />\n      <Segment>\n        <Grid columns={2} divided>\n          <Grid.Column width={5}>\n            {users.length > 0 ? (\n              users.map((user, index) => (\n                <Card\n                  className={selectedUser === user.display_name ? \"active\" : \"\"}\n                  onClick={() => handleClick(user)}\n                >\n                  <TwitzlariaCard\n                    title={user.display_name}\n                    meta={user.view_count}\n                    description={user.description}\n                    image_url={user.profile_image_url}\n                    key={index}\n                  />\n                </Card>\n              ))\n            ) : (\n              <Card>\n                <TwitzlariaCard />\n              </Card>\n            )}\n          </Grid.Column>\n          <Grid.Column width={5}>\n            <Segment>\n              <Header as=\"h2\">\n                <Icon size=\"tiny\" name=\"video camera\" />\n                <Header.Content>Bideoak</Header.Content>\n              </Header>\n            </Segment>\n            <Card.Group>\n              {bideoak.length > 0 ? (\n                bideoak.map((bideoa, index) => (\n                  <Card>\n                    <Image\n                      src={bideoa.thumbnail_url\n                        .replace(\"%{width}\", 440)\n                        .replace(\"%{height}\", 228)}\n                    />\n                    <Card.Content>\n                      <Card.Header\n                        as={Link}\n                        to={{ pathname: bideoa.url }}\n                        target=\"_blank\"\n                      >\n                        {bideoa.title}\n                      </Card.Header>\n                      <Card.Description as=\"a\">\n                        {moment(bideoa.created_at).format(\"YYYY/MM/DD HH:MM\")}\n                      </Card.Description>\n                    </Card.Content>\n                  </Card>\n                ))\n              ) : (\n                <>Ez dago bideorik...</>\n              )}\n            </Card.Group>\n          </Grid.Column>\n          <Grid.Column width={5}>\n            <Segment>\n              <Header as=\"h2\">\n                <Icon size=\"tiny\" name=\"paperclip\" />\n                <Header.Content>klipak</Header.Content>\n              </Header>\n            </Segment>\n            <Card.Group>\n              {klipak.length > 0 ? (\n                klipak.map((clip, index) => (\n                  <Card>\n                    <Image\n                      src={clip.thumbnail_url\n                        .replace(\"%{width}\", 440)\n                        .replace(\"%{height}\", 228)}\n                    />\n                    <Card.Content>\n                      <Card.Header as={Link} to={{ pathname: clip.url }}>\n                        {clip.title}\n                      </Card.Header>\n                      <Card.Description as=\"a\">\n                        {moment(clip.created_at).format(\"YYYY/MM/DD HH:MM\")}\n                      </Card.Description>\n                    </Card.Content>\n                  </Card>\n                ))\n              ) : (\n                <>Ez dago klipik...</>\n              )}\n            </Card.Group>\n          </Grid.Column>\n        </Grid>\n      </Segment>\n    </Container>\n  );\n};\n\nexport default Bilatzailea;\n","import { Card, Image, Label } from \"semantic-ui-react\";\n\nimport React from \"react\";\n\n// import './twitzlariakCard.css'\n\nconst ZuzenekoaCard = ({ erabiltzailea }) => {\n  return (\n    <>\n      <a\n        href={\"https://www.twitch.tv/\" + erabiltzailea?.user_login}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <Card>\n          <Image\n            src={\n              erabiltzailea?.thumbnail_url\n                .replace(\"{width}\", 440)\n                .replace(\"{height}\", 228) ||\n              \"https://www.pngitem.com/pimgs/m/421-4212617_person-placeholder-image-transparent-hd-png-download.png\"\n            }\n          />\n          <Card.Content>\n            <Label color=\"red\" ribbon=\"right\">\n              Zuzenean\n            </Label>\n            <Card.Header>\n              {erabiltzailea?.user_name || \"Twitzlaria\"}\n            </Card.Header>\n            <Card.Meta>\n              {erabiltzailea?.game_name || \"Jokoaren izena\"}\n            </Card.Meta>\n            <Card.Description>\n              {erabiltzailea?.title ||\n                \"twitzlariaren deskribapena hemen idatzita agertuko da\"}\n            </Card.Description>\n          </Card.Content>\n        </Card>\n      </a>\n    </>\n  );\n};\n\nexport default ZuzenekoaCard;\n","import {\n  Card,\n  Container,\n  Grid,\n  Header,\n  Icon,\n  Image,\n  Label,\n  Popup,\n  Segment,\n} from \"semantic-ui-react\";\nimport {\n  GetErabiltzaileak,\n  GetErabiltzailearenKlipak,\n  GetZuzenekoak,\n} from \"./api.js\";\nimport React, { useEffect, useState } from \"react\";\n\nimport { Link } from \"react-router-dom\";\nimport ZuzenekoaCard from \"./ZuzenekoaCard\";\nimport moment from \"moment\";\nimport twitzlariak from \"./twitzlariak.json\";\n\nconst Portada = (props) => {\n  const [klipak, setKlipak] = useState([]);\n  const [users, setUsers] = useState([]);\n  const [zuzenekoak, setZuzenekoak] = useState([]);\n  const getZuzenekoak = async () =>\n    setZuzenekoak(await GetZuzenekoak(twitzlariList));\n  useEffect(() => {\n    getZuzenekoak();\n  }, []);\n  const twitzlariList = twitzlariak.twitzlariak;\n  let gaur = new Date();\n  let atzeraData = new Date();\n  atzeraData.setDate(gaur.getDate() - 20);\n  function dynamicSort(property) {\n    var sortOrder = 1;\n    if (property[0] === \"-\") {\n      sortOrder = -1;\n      property = property.substr(1);\n    }\n    return function (a, b) {\n      /* next line works with strings and numbers,\n       * and you may want to customize it to your needs\n       */\n      var result =\n        a[property] < b[property] ? -1 : a[property] > b[property] ? 1 : 0;\n      return result * sortOrder;\n    };\n  }\n\n  const getErabiltzailearenKlipak = async (user_id) => {\n    return await GetErabiltzailearenKlipak(user_id);\n  };\n  const getErabiltzaileak = async (users) => {\n    return await GetErabiltzaileak(users);\n  };\n\n  useEffect(() => {\n    getErabiltzaileak(twitzlariList).then((response) => {\n      setUsers(response);\n    });\n  }, []);\n\n  useEffect(() => {\n    if (users.length > 0) {\n      users.map((user) => {\n        getErabiltzailearenKlipak(user.id).then((response) => {\n          response.map((klipa) => {\n            setKlipak((prevState) => [...prevState, klipa]);\n          });\n        });\n      });\n    }\n  }, [users]);\n\n  return (\n    <Container>\n      <h1>Hasierako orria</h1>\n      <div className=\"pulsating-circle\"></div>\n      <h2 className=\"pulsating-circle\">Orain zuzenean</h2>\n      {zuzenekoak.length > 0 ? (\n        zuzenekoak.map((erabiltzailea, index) => (\n          <ZuzenekoaCard erabiltzailea={erabiltzailea} />\n        ))\n      ) : (\n        <Segment placeholder>\n          <Header icon>\n            <Icon name=\"history\" />\n            Orain momentuan ez dago inor zuzenean.\n          </Header>\n        </Segment>\n      )}\n      <hr />\n      <h2>Azken 40 egunetako klipak</h2>\n      <Card.Group itemsPerRow={4}>\n        {klipak.sort(dynamicSort(\"-created_at\")).map((clip) => (\n          // <Card>\n          //   <Image\n          //     src={clip.thumbnail_url\n          //       .replace(\"%{width}\", 440)\n          //       .replace(\"%{height}\", 228)}\n          //   />\n          //   <Card.Content>\n          //     <a href={clip.url} rel=\"noreferrer\" target=\"_blank\">\n          //       <Card.Header>{clip.title}</Card.Header>\n          //     </a>\n          //     <Card.Description as=\"a\">\n          //       {moment(clip.created_at).format(\"YYYY/MM/DD HH:MM\")}\n          //     </Card.Description>\n          //   </Card.Content>\n          // </Card>\n          <Card>\n            <Card.Content>\n              <Label attached=\"top left\" color=\"violet\">\n                {clip.broadcaster_name}\n              </Label>\n              <Card.Header>{clip.title}</Card.Header>\n            </Card.Content>\n            <a href={clip.url} target=\"_blank\" rel=\"noreferrer\">\n              <Image\n                src={clip.thumbnail_url\n                  .replace(\"%{width}\", 440)\n                  .replace(\"%{height}\", 228)}\n              />\n            </a>\n            <Card.Content extra>\n              <Grid divided=\"vertically\">\n                <Grid.Row columns={2}>\n                  <Grid.Column>\n                    <div>\n                      <Icon name=\"eye\" />\n                      {clip.view_count} ikustaldi\n                    </div>\n                    <div>\n                      <Icon name=\"clock\" />\n                      {moment(clip.created_at).format(\"YYYY/MM/DD\")}\n                    </div>\n                  </Grid.Column>\n                  <Grid.Column>\n                    <a\n                      type=\"button\"\n                      role=\"button\"\n                      title=\"Share on twitter\"\n                      target={\"_blank\"}\n                      rel=\"noreferrer\"\n                      href={\n                        \"https://twitter.com/intent/tweet?url=\" +\n                        \"[\" +\n                        clip.broadcaster_name +\n                        \"]\" +\n                        \"%0A\" +\n                        clip.title +\n                        \"%0A%0A\" +\n                        clip.url\n                      }\n                    >\n                      <Icon name=\"twitter\" color=\"blue\" size=\"big\" />\n                    </a>\n                    <Popup\n                      content=\"Arbelean kopiatu da zure sareetan partekatzeko!\"\n                      hideOnScroll\n                      basic\n                      inverted\n                      position=\"top center\"\n                      on=\"click\"\n                      trigger={\n                        <Icon\n                          name=\"copy\"\n                          size=\"big\"\n                          onClick={() => {\n                            navigator.clipboard.writeText(\n                              \"[\" +\n                                clip.broadcaster_name +\n                                \"]\" +\n                                \"\\n\" +\n                                clip.title +\n                                \"\\n\\n\" +\n                                clip.url\n                            );\n                          }}\n                        />\n                      }\n                    />\n                  </Grid.Column>\n                </Grid.Row>\n              </Grid>\n            </Card.Content>\n            {console.log(clip)}\n          </Card>\n          // <Card\n          //   image={clip.thumbnail_url\n          //     .replace(\"%{width}\", 440)\n          //     .replace(\"%{height}\", 228)}\n          //   description={clip.broadcaster_name}\n          //   header={clip.title}\n          // >\n          //   {/* <Label color=\"red\" ribbon=\"right\">\n          //     Zuzenean\n          //   </Label> */}\n          // </Card>\n        ))}\n      </Card.Group>\n    </Container>\n  );\n};\n\nexport default Portada;\n","import \"./App.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nimport { Container, Menu } from \"semantic-ui-react\";\nimport { Link, Route, HashRouter as Router, Switch } from \"react-router-dom\";\n\n// import { BrowserRouter as Router } from 'react-router-dom';\nimport Bilatzailea from \"./Bilatzailea\";\nimport Portada from \"./Portada\";\nimport React from \"react\";\n\nfunction App() {\n  return (\n    <Router basename={\"/\"}>\n      <Menu inverted>\n        <Container>\n          <Menu.Item as={Link} to=\"/\">\n            Hasierako orria\n          </Menu.Item>\n          <Menu.Item as={Link} to=\"/bilatzailea\">\n            Bilatzailea\n          </Menu.Item>\n        </Container>\n      </Menu>\n      <Switch>\n        <Route exact path=\"/\">\n          <Portada />\n        </Route>\n        <Route exact path=\"/bilatzailea\">\n          <Bilatzailea />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>  \n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}